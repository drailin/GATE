#ifndef __MCTrack_H__
#define __MCTrack_H__

/**
 * @file MCTrack.h
 *
 * @class MCTrack
 * 
 * @brief Class for true track objects
 *
 * @details Contains a collection of true hits generated by a true particle
 *    
 * @author Pau Novella  <pau.novella@ific.uv.es>
 *
 * @version Revision 1.0.0
 *
 * @date January 2015
 *
 */

#include <iostream>

#include<TSystem.h>

#include<BTrack.h>
#include<MCParticle.h>
#include<MCHit.h>

namespace gate{class MCParticle;}
namespace gate{class MCTrack;}
namespace gate{class MCHit;}

class gate::MCTrack : public gate::BTrack {

 public:
 
  //! default constructor
  MCTrack();
  
  //! destructor
  virtual ~MCTrack(){} 
  
  //! add MC true hit (alias of AddHit with MCHit->BHit cast)
  //void AddMCHit(gate::MCHit* hit);
  
  //! retireve MC true hits (alias of GetHits with BHit->MCHit cast)
  // const std::vector<gate::MCHit*>& GetMCHits() const;

  //! retrieve particle generating the track
  const gate::MCParticle& GetMCParticle() const;

  //! set particle generating the track
  void SetMCParticle(gate::MCParticle* p);
   
  //! print event into stream
  void Info(ostream& s) const;

 protected:
  
  //! true particle responsible for the track
  const  gate::MCParticle* _part;

  ClassDef(gate::MCTrack,1)

};

//inline void gate::MCTrack::AddMCHit(gate::MCHit* hit)
//{ _hits.push_back( (gate::BHit*) hit );}                
//inline const std::vector<gate::MCHit*>& gate::MCTrack::GetMCHits() const
//{return (const std::vector<gate::MCHit*>&) _hits;}
                 
inline const gate::MCParticle& gate::MCTrack::GetMCParticle() const 
{return *_part;}

inline void gate::MCTrack::SetMCParticle(gate::MCParticle* p)  { _part = p;}

ostream& operator << (ostream& s, const gate::MCTrack& trk) ;

#endif
